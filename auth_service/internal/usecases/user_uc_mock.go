// Code generated by mockery v2.26.1. DO NOT EDIT.

package usecases

import (
	context "context"

	repository "github.com/haseebh/weatherapp_auth/internal/entities/repository"
	mock "github.com/stretchr/testify/mock"
)

// MockUserUseCase is an autogenerated mock type for the UserUseCase type
type MockUserUseCase struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, email, password
func (_m *MockUserUseCase) Login(ctx context.Context, email string, password string) (*repository.User, error) {
	ret := _m.Called(ctx, email, password)

	var r0 *repository.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*repository.User, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *repository.User); ok {
		r0 = rf(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, user
func (_m *MockUserUseCase) Register(ctx context.Context, user *repository.User) (*repository.User, error) {
	ret := _m.Called(ctx, user)

	var r0 *repository.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repository.User) (*repository.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repository.User) *repository.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repository.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateToken provides a mock function with given fields: ctx, token
func (_m *MockUserUseCase) ValidateToken(ctx context.Context, token string) error {
	ret := _m.Called(ctx, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockUserUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockUserUseCase creates a new instance of MockUserUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockUserUseCase(t mockConstructorTestingTNewMockUserUseCase) *MockUserUseCase {
	mock := &MockUserUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
